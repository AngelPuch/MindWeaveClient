//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MindWeaveClient.MatchmakingService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LobbySettingsDto", Namespace="http://schemas.datacontract.org/2004/07/MindWeaveServer.Contracts.DataContracts")]
    [System.SerializableAttribute()]
    public partial class LobbySettingsDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] customPuzzleImageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int difficultyIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> preloadedPuzzleIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] customPuzzleImage {
            get {
                return this.customPuzzleImageField;
            }
            set {
                if ((object.ReferenceEquals(this.customPuzzleImageField, value) != true)) {
                    this.customPuzzleImageField = value;
                    this.RaisePropertyChanged("customPuzzleImage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int difficultyId {
            get {
                return this.difficultyIdField;
            }
            set {
                if ((this.difficultyIdField.Equals(value) != true)) {
                    this.difficultyIdField = value;
                    this.RaisePropertyChanged("difficultyId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> preloadedPuzzleId {
            get {
                return this.preloadedPuzzleIdField;
            }
            set {
                if ((this.preloadedPuzzleIdField.Equals(value) != true)) {
                    this.preloadedPuzzleIdField = value;
                    this.RaisePropertyChanged("preloadedPuzzleId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperationResultDto", Namespace="http://schemas.datacontract.org/2004/07/MindWeaveServer.Contracts.DataContracts")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MindWeaveClient.MatchmakingService.LobbyCreationResultDto))]
    public partial class OperationResultDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string messageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool successField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string message {
            get {
                return this.messageField;
            }
            set {
                if ((object.ReferenceEquals(this.messageField, value) != true)) {
                    this.messageField = value;
                    this.RaisePropertyChanged("message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool success {
            get {
                return this.successField;
            }
            set {
                if ((this.successField.Equals(value) != true)) {
                    this.successField = value;
                    this.RaisePropertyChanged("success");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LobbyCreationResultDto", Namespace="http://schemas.datacontract.org/2004/07/MindWeaveServer.Contracts.DataContracts.M" +
        "atchmaking")]
    [System.SerializableAttribute()]
    public partial class LobbyCreationResultDto : MindWeaveClient.MatchmakingService.OperationResultDto {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MindWeaveClient.MatchmakingService.LobbyStateDto initialLobbyStateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string lobbyCodeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MindWeaveClient.MatchmakingService.LobbyStateDto initialLobbyState {
            get {
                return this.initialLobbyStateField;
            }
            set {
                if ((object.ReferenceEquals(this.initialLobbyStateField, value) != true)) {
                    this.initialLobbyStateField = value;
                    this.RaisePropertyChanged("initialLobbyState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string lobbyCode {
            get {
                return this.lobbyCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.lobbyCodeField, value) != true)) {
                    this.lobbyCodeField = value;
                    this.RaisePropertyChanged("lobbyCode");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LobbyStateDto", Namespace="http://schemas.datacontract.org/2004/07/MindWeaveServer.Contracts.DataContracts")]
    [System.SerializableAttribute()]
    public partial class LobbyStateDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MindWeaveClient.MatchmakingService.LobbySettingsDto currentSettingsDtoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string hostUsernameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string lobbyIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] playersField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MindWeaveClient.MatchmakingService.LobbySettingsDto currentSettingsDto {
            get {
                return this.currentSettingsDtoField;
            }
            set {
                if ((object.ReferenceEquals(this.currentSettingsDtoField, value) != true)) {
                    this.currentSettingsDtoField = value;
                    this.RaisePropertyChanged("currentSettingsDto");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string hostUsername {
            get {
                return this.hostUsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.hostUsernameField, value) != true)) {
                    this.hostUsernameField = value;
                    this.RaisePropertyChanged("hostUsername");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string lobbyId {
            get {
                return this.lobbyIdField;
            }
            set {
                if ((object.ReferenceEquals(this.lobbyIdField, value) != true)) {
                    this.lobbyIdField = value;
                    this.RaisePropertyChanged("lobbyId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] players {
            get {
                return this.playersField;
            }
            set {
                if ((object.ReferenceEquals(this.playersField, value) != true)) {
                    this.playersField = value;
                    this.RaisePropertyChanged("players");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MatchmakingService.IMatchmakingManager", CallbackContract=typeof(MindWeaveClient.MatchmakingService.IMatchmakingManagerCallback))]
    public interface IMatchmakingManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchmakingManager/createLobby", ReplyAction="http://tempuri.org/IMatchmakingManager/createLobbyResponse")]
        MindWeaveClient.MatchmakingService.LobbyCreationResultDto createLobby(string hostUsername, MindWeaveClient.MatchmakingService.LobbySettingsDto settingsDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchmakingManager/createLobby", ReplyAction="http://tempuri.org/IMatchmakingManager/createLobbyResponse")]
        System.Threading.Tasks.Task<MindWeaveClient.MatchmakingService.LobbyCreationResultDto> createLobbyAsync(string hostUsername, MindWeaveClient.MatchmakingService.LobbySettingsDto settingsDto);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchmakingManager/inviteToLobby")]
        void inviteToLobby(string inviterUsername, string invitedUsername, string lobbyId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchmakingManager/inviteToLobby")]
        System.Threading.Tasks.Task inviteToLobbyAsync(string inviterUsername, string invitedUsername, string lobbyId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchmakingManager/joinLobby")]
        void joinLobby(string username, string lobbyId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchmakingManager/joinLobby")]
        System.Threading.Tasks.Task joinLobbyAsync(string username, string lobbyId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchmakingManager/leaveLobby")]
        void leaveLobby(string username, string lobbyId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchmakingManager/leaveLobby")]
        System.Threading.Tasks.Task leaveLobbyAsync(string username, string lobbyId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchmakingManager/startGame")]
        void startGame(string hostUsername, string lobbyId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchmakingManager/startGame")]
        System.Threading.Tasks.Task startGameAsync(string hostUsername, string lobbyId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchmakingManager/kickPlayer")]
        void kickPlayer(string hostUsername, string playerToKickUsername, string lobbyId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchmakingManager/kickPlayer")]
        System.Threading.Tasks.Task kickPlayerAsync(string hostUsername, string playerToKickUsername, string lobbyId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMatchmakingManagerCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchmakingManager/receiveLobbyInvite")]
        void receiveLobbyInvite(string fromUsername, string lobbyId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchmakingManager/updateLobbyState")]
        void updateLobbyState(MindWeaveClient.MatchmakingService.LobbyStateDto lobbyStateDto);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchmakingManager/matchFound")]
        void matchFound(string matchId, string[] players);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchmakingManager/lobbyCreationFailed")]
        void lobbyCreationFailed(string reason);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchmakingManager/kickedFromLobby")]
        void kickedFromLobby(string reason);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMatchmakingManagerChannel : MindWeaveClient.MatchmakingService.IMatchmakingManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MatchmakingManagerClient : System.ServiceModel.DuplexClientBase<MindWeaveClient.MatchmakingService.IMatchmakingManager>, MindWeaveClient.MatchmakingService.IMatchmakingManager {
        
        public MatchmakingManagerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public MatchmakingManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public MatchmakingManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MatchmakingManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MatchmakingManagerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public MindWeaveClient.MatchmakingService.LobbyCreationResultDto createLobby(string hostUsername, MindWeaveClient.MatchmakingService.LobbySettingsDto settingsDto) {
            return base.Channel.createLobby(hostUsername, settingsDto);
        }
        
        public System.Threading.Tasks.Task<MindWeaveClient.MatchmakingService.LobbyCreationResultDto> createLobbyAsync(string hostUsername, MindWeaveClient.MatchmakingService.LobbySettingsDto settingsDto) {
            return base.Channel.createLobbyAsync(hostUsername, settingsDto);
        }
        
        public void inviteToLobby(string inviterUsername, string invitedUsername, string lobbyId) {
            base.Channel.inviteToLobby(inviterUsername, invitedUsername, lobbyId);
        }
        
        public System.Threading.Tasks.Task inviteToLobbyAsync(string inviterUsername, string invitedUsername, string lobbyId) {
            return base.Channel.inviteToLobbyAsync(inviterUsername, invitedUsername, lobbyId);
        }
        
        public void joinLobby(string username, string lobbyId) {
            base.Channel.joinLobby(username, lobbyId);
        }
        
        public System.Threading.Tasks.Task joinLobbyAsync(string username, string lobbyId) {
            return base.Channel.joinLobbyAsync(username, lobbyId);
        }
        
        public void leaveLobby(string username, string lobbyId) {
            base.Channel.leaveLobby(username, lobbyId);
        }
        
        public System.Threading.Tasks.Task leaveLobbyAsync(string username, string lobbyId) {
            return base.Channel.leaveLobbyAsync(username, lobbyId);
        }
        
        public void startGame(string hostUsername, string lobbyId) {
            base.Channel.startGame(hostUsername, lobbyId);
        }
        
        public System.Threading.Tasks.Task startGameAsync(string hostUsername, string lobbyId) {
            return base.Channel.startGameAsync(hostUsername, lobbyId);
        }
        
        public void kickPlayer(string hostUsername, string playerToKickUsername, string lobbyId) {
            base.Channel.kickPlayer(hostUsername, playerToKickUsername, lobbyId);
        }
        
        public System.Threading.Tasks.Task kickPlayerAsync(string hostUsername, string playerToKickUsername, string lobbyId) {
            return base.Channel.kickPlayerAsync(hostUsername, playerToKickUsername, lobbyId);
        }
    }
}
