//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MindWeaveClient.SocialManagerService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerSearchResultDto", Namespace="http://schemas.datacontract.org/2004/07/MindWeaveServer.Contracts.DataContracts.S" +
        "ocial")]
    [System.SerializableAttribute()]
    public partial class PlayerSearchResultDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string avatarPathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string usernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string avatarPath {
            get {
                return this.avatarPathField;
            }
            set {
                if ((object.ReferenceEquals(this.avatarPathField, value) != true)) {
                    this.avatarPathField = value;
                    this.RaisePropertyChanged("avatarPath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string username {
            get {
                return this.usernameField;
            }
            set {
                if ((object.ReferenceEquals(this.usernameField, value) != true)) {
                    this.usernameField = value;
                    this.RaisePropertyChanged("username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperationResultDto", Namespace="http://schemas.datacontract.org/2004/07/MindWeaveServer.Contracts.DataContracts")]
    [System.SerializableAttribute()]
    public partial class OperationResultDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string messageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool successField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string message {
            get {
                return this.messageField;
            }
            set {
                if ((object.ReferenceEquals(this.messageField, value) != true)) {
                    this.messageField = value;
                    this.RaisePropertyChanged("message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool success {
            get {
                return this.successField;
            }
            set {
                if ((this.successField.Equals(value) != true)) {
                    this.successField = value;
                    this.RaisePropertyChanged("success");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FriendDto", Namespace="http://schemas.datacontract.org/2004/07/MindWeaveServer.Contracts.DataContracts")]
    [System.SerializableAttribute()]
    public partial class FriendDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string avatarPathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isOnlineField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string usernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string avatarPath {
            get {
                return this.avatarPathField;
            }
            set {
                if ((object.ReferenceEquals(this.avatarPathField, value) != true)) {
                    this.avatarPathField = value;
                    this.RaisePropertyChanged("avatarPath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isOnline {
            get {
                return this.isOnlineField;
            }
            set {
                if ((this.isOnlineField.Equals(value) != true)) {
                    this.isOnlineField = value;
                    this.RaisePropertyChanged("isOnline");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string username {
            get {
                return this.usernameField;
            }
            set {
                if ((object.ReferenceEquals(this.usernameField, value) != true)) {
                    this.usernameField = value;
                    this.RaisePropertyChanged("username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FriendRequestInfoDto", Namespace="http://schemas.datacontract.org/2004/07/MindWeaveServer.Contracts.DataContracts")]
    [System.SerializableAttribute()]
    public partial class FriendRequestInfoDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string avatarPathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime requestDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string requesterUsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string avatarPath {
            get {
                return this.avatarPathField;
            }
            set {
                if ((object.ReferenceEquals(this.avatarPathField, value) != true)) {
                    this.avatarPathField = value;
                    this.RaisePropertyChanged("avatarPath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime requestDate {
            get {
                return this.requestDateField;
            }
            set {
                if ((this.requestDateField.Equals(value) != true)) {
                    this.requestDateField = value;
                    this.RaisePropertyChanged("requestDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string requesterUsername {
            get {
                return this.requesterUsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.requesterUsernameField, value) != true)) {
                    this.requesterUsernameField = value;
                    this.RaisePropertyChanged("requesterUsername");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SocialManagerService.ISocialManager", CallbackContract=typeof(MindWeaveClient.SocialManagerService.ISocialManagerCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface ISocialManager {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISocialManager/connect")]
        void connect(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISocialManager/connect")]
        System.Threading.Tasks.Task connectAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISocialManager/disconnect")]
        void disconnect(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISocialManager/disconnect")]
        System.Threading.Tasks.Task disconnectAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISocialManager/searchPlayers", ReplyAction="http://tempuri.org/ISocialManager/searchPlayersResponse")]
        MindWeaveClient.SocialManagerService.PlayerSearchResultDto[] searchPlayers(string requesterUsername, string query);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISocialManager/searchPlayers", ReplyAction="http://tempuri.org/ISocialManager/searchPlayersResponse")]
        System.Threading.Tasks.Task<MindWeaveClient.SocialManagerService.PlayerSearchResultDto[]> searchPlayersAsync(string requesterUsername, string query);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISocialManager/sendFriendRequest", ReplyAction="http://tempuri.org/ISocialManager/sendFriendRequestResponse")]
        MindWeaveClient.SocialManagerService.OperationResultDto sendFriendRequest(string requesterUsername, string targetUsername);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISocialManager/sendFriendRequest", ReplyAction="http://tempuri.org/ISocialManager/sendFriendRequestResponse")]
        System.Threading.Tasks.Task<MindWeaveClient.SocialManagerService.OperationResultDto> sendFriendRequestAsync(string requesterUsername, string targetUsername);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISocialManager/respondToFriendRequest", ReplyAction="http://tempuri.org/ISocialManager/respondToFriendRequestResponse")]
        MindWeaveClient.SocialManagerService.OperationResultDto respondToFriendRequest(string responderUsername, string requesterUsername, bool accepted);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISocialManager/respondToFriendRequest", ReplyAction="http://tempuri.org/ISocialManager/respondToFriendRequestResponse")]
        System.Threading.Tasks.Task<MindWeaveClient.SocialManagerService.OperationResultDto> respondToFriendRequestAsync(string responderUsername, string requesterUsername, bool accepted);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISocialManager/removeFriend", ReplyAction="http://tempuri.org/ISocialManager/removeFriendResponse")]
        MindWeaveClient.SocialManagerService.OperationResultDto removeFriend(string username, string friendToRemoveUsername);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISocialManager/removeFriend", ReplyAction="http://tempuri.org/ISocialManager/removeFriendResponse")]
        System.Threading.Tasks.Task<MindWeaveClient.SocialManagerService.OperationResultDto> removeFriendAsync(string username, string friendToRemoveUsername);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISocialManager/getFriendsList", ReplyAction="http://tempuri.org/ISocialManager/getFriendsListResponse")]
        MindWeaveClient.SocialManagerService.FriendDto[] getFriendsList(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISocialManager/getFriendsList", ReplyAction="http://tempuri.org/ISocialManager/getFriendsListResponse")]
        System.Threading.Tasks.Task<MindWeaveClient.SocialManagerService.FriendDto[]> getFriendsListAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISocialManager/getFriendRequests", ReplyAction="http://tempuri.org/ISocialManager/getFriendRequestsResponse")]
        MindWeaveClient.SocialManagerService.FriendRequestInfoDto[] getFriendRequests(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISocialManager/getFriendRequests", ReplyAction="http://tempuri.org/ISocialManager/getFriendRequestsResponse")]
        System.Threading.Tasks.Task<MindWeaveClient.SocialManagerService.FriendRequestInfoDto[]> getFriendRequestsAsync(string username);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISocialManagerCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISocialManager/notifyFriendRequest")]
        void notifyFriendRequest(string fromUsername);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISocialManager/notifyFriendResponse")]
        void notifyFriendResponse(string fromUsername, bool accepted);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISocialManager/notifyFriendStatusChanged")]
        void notifyFriendStatusChanged(string friendUsername, bool isOnline);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISocialManagerChannel : MindWeaveClient.SocialManagerService.ISocialManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SocialManagerClient : System.ServiceModel.DuplexClientBase<MindWeaveClient.SocialManagerService.ISocialManager>, MindWeaveClient.SocialManagerService.ISocialManager {
        
        public SocialManagerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public SocialManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public SocialManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public SocialManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public SocialManagerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void connect(string username) {
            base.Channel.connect(username);
        }
        
        public System.Threading.Tasks.Task connectAsync(string username) {
            return base.Channel.connectAsync(username);
        }
        
        public void disconnect(string username) {
            base.Channel.disconnect(username);
        }
        
        public System.Threading.Tasks.Task disconnectAsync(string username) {
            return base.Channel.disconnectAsync(username);
        }
        
        public MindWeaveClient.SocialManagerService.PlayerSearchResultDto[] searchPlayers(string requesterUsername, string query) {
            return base.Channel.searchPlayers(requesterUsername, query);
        }
        
        public System.Threading.Tasks.Task<MindWeaveClient.SocialManagerService.PlayerSearchResultDto[]> searchPlayersAsync(string requesterUsername, string query) {
            return base.Channel.searchPlayersAsync(requesterUsername, query);
        }
        
        public MindWeaveClient.SocialManagerService.OperationResultDto sendFriendRequest(string requesterUsername, string targetUsername) {
            return base.Channel.sendFriendRequest(requesterUsername, targetUsername);
        }
        
        public System.Threading.Tasks.Task<MindWeaveClient.SocialManagerService.OperationResultDto> sendFriendRequestAsync(string requesterUsername, string targetUsername) {
            return base.Channel.sendFriendRequestAsync(requesterUsername, targetUsername);
        }
        
        public MindWeaveClient.SocialManagerService.OperationResultDto respondToFriendRequest(string responderUsername, string requesterUsername, bool accepted) {
            return base.Channel.respondToFriendRequest(responderUsername, requesterUsername, accepted);
        }
        
        public System.Threading.Tasks.Task<MindWeaveClient.SocialManagerService.OperationResultDto> respondToFriendRequestAsync(string responderUsername, string requesterUsername, bool accepted) {
            return base.Channel.respondToFriendRequestAsync(responderUsername, requesterUsername, accepted);
        }
        
        public MindWeaveClient.SocialManagerService.OperationResultDto removeFriend(string username, string friendToRemoveUsername) {
            return base.Channel.removeFriend(username, friendToRemoveUsername);
        }
        
        public System.Threading.Tasks.Task<MindWeaveClient.SocialManagerService.OperationResultDto> removeFriendAsync(string username, string friendToRemoveUsername) {
            return base.Channel.removeFriendAsync(username, friendToRemoveUsername);
        }
        
        public MindWeaveClient.SocialManagerService.FriendDto[] getFriendsList(string username) {
            return base.Channel.getFriendsList(username);
        }
        
        public System.Threading.Tasks.Task<MindWeaveClient.SocialManagerService.FriendDto[]> getFriendsListAsync(string username) {
            return base.Channel.getFriendsListAsync(username);
        }
        
        public MindWeaveClient.SocialManagerService.FriendRequestInfoDto[] getFriendRequests(string username) {
            return base.Channel.getFriendRequests(username);
        }
        
        public System.Threading.Tasks.Task<MindWeaveClient.SocialManagerService.FriendRequestInfoDto[]> getFriendRequestsAsync(string username) {
            return base.Channel.getFriendRequestsAsync(username);
        }
    }
}
