//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MindWeaveClient.ChatManagerService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChatMessageDto", Namespace="http://schemas.datacontract.org/2004/07/MindWeaveServer.Contracts.DataContracts")]
    [System.SerializableAttribute()]
    public partial class ChatMessageDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string contentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string senderUsernameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime timestampField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string content {
            get {
                return this.contentField;
            }
            set {
                if ((object.ReferenceEquals(this.contentField, value) != true)) {
                    this.contentField = value;
                    this.RaisePropertyChanged("content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string senderUsername {
            get {
                return this.senderUsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.senderUsernameField, value) != true)) {
                    this.senderUsernameField = value;
                    this.RaisePropertyChanged("senderUsername");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime timestamp {
            get {
                return this.timestampField;
            }
            set {
                if ((this.timestampField.Equals(value) != true)) {
                    this.timestampField = value;
                    this.RaisePropertyChanged("timestamp");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ChatManagerService.IChatManager", CallbackContract=typeof(MindWeaveClient.ChatManagerService.IChatManagerCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IChatManager {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatManager/joinLobbyChat")]
        void joinLobbyChat(string username, string lobbyId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatManager/joinLobbyChat")]
        System.Threading.Tasks.Task joinLobbyChatAsync(string username, string lobbyId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatManager/leaveLobbyChat")]
        void leaveLobbyChat(string username, string lobbyId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatManager/leaveLobbyChat")]
        System.Threading.Tasks.Task leaveLobbyChatAsync(string username, string lobbyId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatManager/sendLobbyMessage")]
        void sendLobbyMessage(string senderUsername, string lobbyId, string messageContent);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatManager/sendLobbyMessage")]
        System.Threading.Tasks.Task sendLobbyMessageAsync(string senderUsername, string lobbyId, string messageContent);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatManagerCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatManager/receiveLobbyMessage")]
        void receiveLobbyMessage(MindWeaveClient.ChatManagerService.ChatMessageDto messageDto);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatManagerChannel : MindWeaveClient.ChatManagerService.IChatManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatManagerClient : System.ServiceModel.DuplexClientBase<MindWeaveClient.ChatManagerService.IChatManager>, MindWeaveClient.ChatManagerService.IChatManager {
        
        public ChatManagerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChatManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChatManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatManagerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void joinLobbyChat(string username, string lobbyId) {
            base.Channel.joinLobbyChat(username, lobbyId);
        }
        
        public System.Threading.Tasks.Task joinLobbyChatAsync(string username, string lobbyId) {
            return base.Channel.joinLobbyChatAsync(username, lobbyId);
        }
        
        public void leaveLobbyChat(string username, string lobbyId) {
            base.Channel.leaveLobbyChat(username, lobbyId);
        }
        
        public System.Threading.Tasks.Task leaveLobbyChatAsync(string username, string lobbyId) {
            return base.Channel.leaveLobbyChatAsync(username, lobbyId);
        }
        
        public void sendLobbyMessage(string senderUsername, string lobbyId, string messageContent) {
            base.Channel.sendLobbyMessage(senderUsername, lobbyId, messageContent);
        }
        
        public System.Threading.Tasks.Task sendLobbyMessageAsync(string senderUsername, string lobbyId, string messageContent) {
            return base.Channel.sendLobbyMessageAsync(senderUsername, lobbyId, messageContent);
        }
    }
}
