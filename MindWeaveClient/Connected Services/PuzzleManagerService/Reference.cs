//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MindWeaveClient.PuzzleManagerService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PuzzleInfoDto", Namespace="http://schemas.datacontract.org/2004/07/MindWeaveServer.Contracts.DataContracts")]
    [System.SerializableAttribute()]
    public partial class PuzzleInfoDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string imagePathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int puzzleIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string imagePath {
            get {
                return this.imagePathField;
            }
            set {
                if ((object.ReferenceEquals(this.imagePathField, value) != true)) {
                    this.imagePathField = value;
                    this.RaisePropertyChanged("imagePath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int puzzleId {
            get {
                return this.puzzleIdField;
            }
            set {
                if ((this.puzzleIdField.Equals(value) != true)) {
                    this.puzzleIdField = value;
                    this.RaisePropertyChanged("puzzleId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperationResultDto", Namespace="http://schemas.datacontract.org/2004/07/MindWeaveServer.Contracts.DataContracts.S" +
        "hared")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MindWeaveClient.PuzzleManagerService.UploadResultDto))]
    public partial class OperationResultDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string messageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool successField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string message {
            get {
                return this.messageField;
            }
            set {
                if ((object.ReferenceEquals(this.messageField, value) != true)) {
                    this.messageField = value;
                    this.RaisePropertyChanged("message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool success {
            get {
                return this.successField;
            }
            set {
                if ((this.successField.Equals(value) != true)) {
                    this.successField = value;
                    this.RaisePropertyChanged("success");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UploadResultDto", Namespace="http://schemas.datacontract.org/2004/07/MindWeaveServer.Contracts.DataContracts")]
    [System.SerializableAttribute()]
    public partial class UploadResultDto : MindWeaveClient.PuzzleManagerService.OperationResultDto {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int newPuzzleIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int newPuzzleId {
            get {
                return this.newPuzzleIdField;
            }
            set {
                if ((this.newPuzzleIdField.Equals(value) != true)) {
                    this.newPuzzleIdField = value;
                    this.RaisePropertyChanged("newPuzzleId");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PuzzleManagerService.IPuzzleManager")]
    public interface IPuzzleManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPuzzleManager/getAvailablePuzzles", ReplyAction="http://tempuri.org/IPuzzleManager/getAvailablePuzzlesResponse")]
        MindWeaveClient.PuzzleManagerService.PuzzleInfoDto[] getAvailablePuzzles();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPuzzleManager/getAvailablePuzzles", ReplyAction="http://tempuri.org/IPuzzleManager/getAvailablePuzzlesResponse")]
        System.Threading.Tasks.Task<MindWeaveClient.PuzzleManagerService.PuzzleInfoDto[]> getAvailablePuzzlesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPuzzleManager/uploadPuzzleImage", ReplyAction="http://tempuri.org/IPuzzleManager/uploadPuzzleImageResponse")]
        MindWeaveClient.PuzzleManagerService.UploadResultDto uploadPuzzleImage(string username, byte[] imageBytes, string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPuzzleManager/uploadPuzzleImage", ReplyAction="http://tempuri.org/IPuzzleManager/uploadPuzzleImageResponse")]
        System.Threading.Tasks.Task<MindWeaveClient.PuzzleManagerService.UploadResultDto> uploadPuzzleImageAsync(string username, byte[] imageBytes, string fileName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPuzzleManagerChannel : MindWeaveClient.PuzzleManagerService.IPuzzleManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PuzzleManagerClient : System.ServiceModel.ClientBase<MindWeaveClient.PuzzleManagerService.IPuzzleManager>, MindWeaveClient.PuzzleManagerService.IPuzzleManager {
        
        public PuzzleManagerClient() {
        }
        
        public PuzzleManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PuzzleManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PuzzleManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PuzzleManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public MindWeaveClient.PuzzleManagerService.PuzzleInfoDto[] getAvailablePuzzles() {
            return base.Channel.getAvailablePuzzles();
        }
        
        public System.Threading.Tasks.Task<MindWeaveClient.PuzzleManagerService.PuzzleInfoDto[]> getAvailablePuzzlesAsync() {
            return base.Channel.getAvailablePuzzlesAsync();
        }
        
        public MindWeaveClient.PuzzleManagerService.UploadResultDto uploadPuzzleImage(string username, byte[] imageBytes, string fileName) {
            return base.Channel.uploadPuzzleImage(username, imageBytes, fileName);
        }
        
        public System.Threading.Tasks.Task<MindWeaveClient.PuzzleManagerService.UploadResultDto> uploadPuzzleImageAsync(string username, byte[] imageBytes, string fileName) {
            return base.Channel.uploadPuzzleImageAsync(username, imageBytes, fileName);
        }
    }
}
